#==== Program Hello World ====# 
Cara membuat kode
lewat html langsung, hello-world.html
lewat import dengan tag source dan atribut src, hello-world-file.html


#==== Komentar ====#
adalah kode program yang tidak akan dieksekusi, hello-world.html


#==== Tipe Data Number ====#
js hanya mendukung satu tipe data number yaitu number
bilangan bulat dan pecahan adalah number
number notation di js default nya desimal (basis 10), selain itu
hexadecimal 0x(angak hexadecimal)
binary 0b(angka biner)
octal 0o(angka oktal)


#==== Tipe Data Boolean ====#
tipe data kebenaran, hanya bernilai true atau false


#==== Tipe Data String ====#
tipe data text, dibuat dengan diapit petik satu atau ganda
"data" atau 'data'

menggabungkan string, dengan + (concating)
"nama depan" + "nama tengah" + "nama belakang"

escape squence, karakter khusus seperti
enter (\n), tab (\t), petik satu atau ganda, backslash dll
praktik dengan textarea agar enter terlihat

#==== Variable ====#
tempat untuk menyimpan data, sebenarnya hanya menyimpan lokasi data di memory
data dapat digunakan lagi
sebelum tahun 2015 membuat variable dengan keyword var
setelahnya diperkenalkan let dan const (untuk constanta), karena terdapat masalah dengan var
jika dirubah maka error
jika terdapat error kode dibawahnya tidak akan dieksekusi

#==== Operator Matematika ====#
banyak operator Matematika yang didukung seperti: aritmatika, argumented assignments, unary, dll


#==== Operator Perbandingan ====#
oprasi untuk membandingkan dua buah data dan menghasilkan nilai Boolean
jika hasil oprasinya benar maka menghasilkan true
jika salah maka false


#==== Operator Logika ====#
ini adalah operator untuk dua data Boolean,
logika dasar seperti and, or, xor
contoh true and false menghasilkan false


#==== Console ====#
js memiliki fitur untuk logging, dengan mencetak di Console
untuk melakukan ini dengan console dan Method-method nya
berikut urutan level nya
console.debug (untuk debug)
console.log / info (untuk info)
console.table (mencetak table)
console.warn (warning)
console.error (error)

secara default yang tampil hanya level log dan setelahnya (debug tidak muncul)
untuk memunculkan nya ubah level di console


#==== String Template ====#
menggunakan operator + untuk concating string yang banyak sangatlah berbelit-berbelit
dengan string template kita bisa mensubtitusi data dari luar string tanpa keluar dari string
atau bahkan melakukan oprasi Matematika
untuk menggunakan string template dengan backtic `data`
selain itu ini juga bisa untuk multiline string (bermasalah)


#==== Konversi String dan Number ====#
parseInt atau parseFloat mentolelir kesalahan di belakang
    parseInt("1salah") => 1
Number tidak mentolelir kesalahan apapun
    Numconditionber("1salah") => NaN

float dibulatkan ke bawah jika menjadi parseInt
NaN ada singaktan dari Not a Number atau angka unik yang menyatakan ini bukan angka
NaN akibat kesalahan parsing atau oprasi dengan NaN


#==== Tipe Data Array ====#
kumpulan tipe data, di JS ini dinamis (ukuran bisa bertambah) dan tipe bebas
menambah di akhir dengan push()
mengambil spesifik dengan index, data[0]
menghapus dengan delete data[0], tidak menggeser (index juga akan hilang bersama data)
namun array length tetap sama meskipun di delete (kelak index bisa di buat lagi)


#==== Tipe Data Object ====#
di bahasa lain index bisa menggunakan tipe selain number (array asosiatif php), namun di js tidak bisa
jika array diberikan index selain number, maka di ubah menjadi objek
ini berbahaya karena oprasi array dan objek berbeda
objek mirip array tapi index nya juga bisa string
const objek {
    attribute: property
}   


#==== If Expression ====#
salah satu kata kunci percabangan



#==== Popup ====#
js memiliki fitur bernama alert, prompt dan confirm
digunakan untuk memberi peringatan berupa popup di browser
alert memberi peringatan
prompt meminta input string
confirm meminta input boolean


#==== Undefined ====#
adalah kata kunci, sebuah tipe data yang belum terdefinisikan
seperti variable yang belum ditambahkan nilai
array yang tidak ada di index
objek yang property nya tidak ada


#==== Null ====#
null adalah data yang kosong, sudah didefinisikan tapi kosong
itu adalah sebuah tempat kosong di memory yang selamanya kosong


#==== Switch Expression ====#
percabangan yang lebih sederhana
hanya untuk ==
hanya untuk satu variable / data


#==== Operator typeof ====#
operator untuk mengetahui tipe data sebuah value atau variable
typeof a // me return string tipe data dari a


#==== Operator in ====#
operator untuk mengecek sebuah property ada di objek atau tidak
bisa juga sebuah index ada di array atau tidak
me return boolean, true jika ada
"a" in namaObjek
0 in namaArray
walapun tipe datanya null atau undefined akan tetap mengembalikan true
lebih tepatnya didefinisikan sebagai null / undefined


#==== Ternary Operator ====#
operator sederhana dari if statement
mengambil nilai kiri jika benar, kanan jika salah
boolean ? nilaikiri : nilaikanan


#==== Nullish Coalescing Operator ====#
nullish value adalah null dan undefined
nullish coalescing operator ?? mirip dengan Ternary
true jika mendapatkan nullish value
nilai string kosong bukan nullish


#==== Optional Chaining ====#
mirip dengan ternary, namun berbeda cara penggunaan nya,
digunakan untuk mengamankan ketika mengakses property dari data nullish (agar tidak terjadi error)


#==== Falsy dan Truthy ====#
falsy kadang ditulis falsey, tipe data lain berubah menjadi boolean false
truthy, tipe data lain yang berubah menjadi boolean true
false: number 0 & -0, string kosong, null, undefined, NaN
true: selain false, array kosong dan objek kosong termasuk true
ini bisa digunakan di perulangan, percabangan, dan tempat-tempat yang seharusnya membutuhkan boolean


#==== Operator Logika di Non Boolean ====#
|| dari kiri ambil yang true atau terakhir
&& dari kiri ambil yang false atau terakhir


#==== For Loop ====#
for (init, kondisi, post){
    body
}
init: sekali di awal
kondisi: dicek jika true body dan post berjalan
body: yang dijalankan
post: setelah body
ketiganya tidak wajib di isi, default kondisi true
for (;;){

}


#==== While Loop ====#
seperti for, tapi hanya ada kondisi
while(kondisi){
    body
}


#==== Do While Loop ====#
seperti while, tapi body dijalankan sebelum kondisi
do{
    body
} while()
body, kondisi (jika true kembali ke body)


#==== Break dan Continue ====#
break, menghentikan seluruh perulangan
continue, menghentikan perulangan saat ini, lanjut ke perulangan berikutnya
continue menghentikan body, post statement tetap berjalan


#==== Label ====#
penanda untuk break dan continue digunakan


#==== For In ====#
digunakan untuk mengiterasi seluruh property di objek
atau index array (tidak di rekomendasikan, sudah jelas 0 sampai length-1)
nama property, bukan value nya


#==== For Of ====#
seperti for in tapi tidak bisa untuk objek, dan menghasilkan value nya bukan index nya
karena objek bukan data iterable, ini hanya untuk data iterable seperti array dan string


#==== With Statement ====#
tidak direkomendasikan di versi baru
memanggil objek tanpa menulis objek berkali-kali
const person = {
    name: "Lea",
    age: 20
}

const name = "Bukan Lea"
with(person){
    console.log(name); // ini hanya bisa Lea
}


#==== Function ====#
function foo(){
    body
}
foo()

#==== Function Parameter ====#
function foo(data1, data2){
    body
}
foo(argForData1, argForData2)


#==== Function Return Value ====#
function foo(data1, data2){
    const hasil = data1 + data2
    return hasil
}
const result = foo(1, 2)
hanya booleh 1 data yang di return (satu array banyak index termasuk satu data)


#==== Optional Parameter ====#
secara default, parameter di js itu opsional (tidak wajib mengirim argumen)
jika tidak dikirim argumen maka undefined
anda bisa membuat function dengan 3 parameter dan hanya mengirim 2, 
atau bahkan mengirim 4 tanpa terjadi error


#==== Default Parameter ====#
digunakan ketika argumen tidak dikirim ke parameter
atau argumen yang dikirim adalah undefined
function foo(name = "default"){
    console.log(name)
}
foo() // menghasilkan default


#==== Rest Parameter ====#
mengirim data sebanyak-banyaknya di parameter dan dikonversi menjadi array
harus param terakhir
function foo(name, ..restParam){

}
foo("lea", 1, 2, 3, 4, 5) // sebanyak-banyaknya akan masuk di rest parameter
sebelumnya ada arguments object, mengambil semua argument yang dikirim
function foo(){
    arguments // ini sebuah objek yang isinya seluruh argumen yang dikirim
}


#==== Function Sebagai Value ====#
function juga bisa sebagai value, disimpan di variable
bisa dikirim ke function lain, digunakan sebagai value, seperti variable
function foo(name){
    console.log(name)
}
foo("lea") // result lea
const bar = foo // function sebagai value
bar("lia") // result lia

contoh lain, dikirim ke function lain
function giveMeName(callback){
    callback("lio")
}
giveMeName(say) // sama seperti mengirim function say ke callback dan argumen nya lio
giveMeName(foo) // sama seperti mengirim function foo ke callback dan argumen nya lio


#==== Anonymous Function ====#
function tanpa nama, dibuat di dalam sebuah variable atau dibuat dalam argumen yang di kirim
let say = function (name){
    console.log(name)
} // tidak memiliki nama, say adalah variable bukan nama function itu sendiri

contoh lain, Anonymous dikirim ke function lain
function giveMeName(callback){
    callback("lio")
}
giveMeName(function (name){
    console.log(name) // result lio, ini seperti routing sederhana laravel
})


#==== Function dalam Function ====#
tidak ada batasan dimana boleh membuat function
bahkan bisa di dalam function, function yang didalam function kita sebut inner function
inner function hanya bisa diakses di tempat kita membuatnya
function outer(){
    function inner(){}

    inner()
}
outer()
inner() // error


#==== Scope ====#
area akses sebuah data, ada 2 jenis scope di js
global scope, local scope
setiap membuat function, maka kita membuat local scope untuk function tersebut
data global scope bisa diakses dari loacal, namun data local hanya bisa diakses di scope nya sendiri
let dataGlobal = 'data'
function foo(){
    dataGlobal // tidak error
    let dataLocalFoo = 'foo'
}
dataLocalFoo // error, hanya bisa diakses di foo dalam foo


#==== Recursive Function ====#
kemampuan function memanggil dirinya sendiri


#==== Function Generator ====#
function yang digunakan untuk membuat data generator
generator adalah data yang bisa di iterasi (seperti array) / data iterator
untuk membuat function generator dengan tanda * setelah kata function
mengembalikan data dengan keyword yeild 
data hanya bisa di iterasi, tidak bisa di ubah
ini bersifat lazy, jika data tidak diambil, maka data selanjutnya tidak di eksekusi


#==== Arrow Function ====#
alternatif pembuatan function yang lebih sederhana,
dengan simbol arrow =>, namun punya beberapa kekurangan
- tidak bisa menggunakan arguments object
- tidak bisa menggunakan function generator
- tidak bisa mengakses this dan super
- harus dibuat di dalam variable atau sebagai argumen yang dikirim


#==== Closure ====#
adalah kombinasi function dan bundel referensi ke data disekitarnya.
kita bisa membuat sebuah function di local scope dan referensi ke data di sekitar local scope tersebut, 
keluar scope nya


#==== Object Method ====#
kita sudah membahas tentang property di object
sebenarnya function juga merupakan salah satu tipe data,
jadi function pun sebenarnya bisa ditambahkan sebagai property di object
function di object kadang disebut juga sebagai Object Method


#==== Kata Kunci this ====#
adalah referensi ke object milik siapa
tiap lokasi kata kunci this, bisa berbeda-beda referensi pemilik nya
dalam Object Method, this merupakan referensi ke object pemilik function nya
di global scope, this merupakan referensi ke global object (di browser biasanya Window)
dalam function, this merupakan referensi ke global object (di browser biasanya Window)
di function dengan strict mode (akan dibahas nanti), this adalah undefined
dalam event, this merupakan referensi ke element yang menerima event (dibahas di materi Document Object Model)


#==== Arrow Function di Object ====#
this di sini mengacu ke Window, 
tidak bisa menggunakan fitur seperti yang dijelaskan di arrow function



#==== Getter dan Setter ====#
Getter dan Setter adalah kemampuan membuat function yang berbeda untuk 
mengambil data (Getter)
mengubah data (Setter) pada sebuah property di Object
Dengan menggunakan Getter dan Setter, kita bisa melakukan hal apapun dalam function
sebelum sebuah property di akses atau diubah, misal menambah validasi dan lain-lain



#==== Masalah Variable var ====#



#==== Destructuring ====#



#==== Strict Mode ====#



#==== Debugger ====#






